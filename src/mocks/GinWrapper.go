// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// GinWrapper is an autogenerated mock type for the GinWrapper type
type GinWrapper struct {
	mock.Mock
}

// Inner provides a mock function with given fields:
func (_m *GinWrapper) Inner() *gin.Context {
	ret := _m.Called()

	var r0 *gin.Context
	if rf, ok := ret.Get(0).(func() *gin.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Context)
		}
	}

	return r0
}

// JSON provides a mock function with given fields: _a0, _a1
func (_m *GinWrapper) JSON(_a0 int, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// Param provides a mock function with given fields: _a0
func (_m *GinWrapper) Param(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShouldBindJSON provides a mock function with given fields: _a0
func (_m *GinWrapper) ShouldBindJSON(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGinWrapper creates a new instance of GinWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGinWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *GinWrapper {
	mock := &GinWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
